name: Security Scan

on:
  push:
    branches: [ main, ruthless_audit ]
  pull_request:
    branches: [ main ]

env:
  FAIL_ON_SEVERITY: HIGH,CRITICAL

jobs:
  frontend-security:
    name: Frontend Security Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
    
    - name: Install dependencies
      working-directory: ./ui
      run: npm ci
    
    - name: NPM Audit (Production)
      working-directory: ./ui
      run: |
        npm audit --production --audit-level=high
        if [ $? -ne 0 ]; then
          echo "::error::HIGH or CRITICAL vulnerabilities found in npm dependencies"
          exit 1
        fi
    
    - name: Run ESLint Security Plugin
      working-directory: ./ui
      run: npm run lint
      continue-on-error: false
    
    - name: Check for hardcoded secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./ui
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  backend-security:
    name: Backend Security Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install bandit safety pip-audit semgrep
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json -ll
        if [ $? -ne 0 ]; then
          echo "::error::Security issues found by Bandit"
          cat bandit-report.json
          exit 1
        fi
    
    - name: Run Safety Check
      run: |
        safety check --json --continue-on-error
        safety_exit_code=$?
        if [ $safety_exit_code -ne 0 ]; then
          echo "::error::Vulnerable dependencies found by Safety"
          exit 1
        fi
    
    - name: Run pip-audit
      run: |
        pip-audit --desc
        if [ $? -ne 0 ]; then
          echo "::error::Vulnerable dependencies found by pip-audit"
          exit 1
        fi
    
    - name: SQL Injection Check
      run: |
        # Check for string formatting in SQL queries
        if grep -r "execute.*%" --include="*.py" .; then
          echo "::error::Potential SQL injection vulnerability found (string formatting in SQL)"
          exit 1
        fi
        if grep -r "execute.*format" --include="*.py" .; then
          echo "::error::Potential SQL injection vulnerability found (format in SQL)"
          exit 1
        fi

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/javascript
          p/typescript
          p/react
          p/flask
          p/owasp-top-ten
        generateSarif: true
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      if: always()

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'phish-intel'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: Upload results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/
      if: always()

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false  # Enable when Dockerfile is added
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'

  security-gate:
    name: Security Gate Check
    needs: [frontend-security, backend-security, semgrep, dependency-check]
    runs-on: ubuntu-latest
    steps:
    - name: Security Gate Passed
      run: |
        echo "✅ All security checks passed!"
        echo "Frontend: ✓"
        echo "Backend: ✓"
        echo "SAST: ✓"
        echo "Dependencies: ✓"